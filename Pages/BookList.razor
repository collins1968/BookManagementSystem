@page "/"

<div class="container mx-auto">
    <div class="bg-blue-500 text-white p-4">
        <h1 class="text-2xl font-semibold">Book List</h1>
    </div>

    <table class="table-auto w-full mt-4 border-collapse">
        <thead>
            <tr class="bg-gray-200">
                <th class="px-6 py-3">Id</th> 
                <th class="px-6 py-3">Title</th> 
                <th class="px-6 py-3">Description</th> 
                <th class="px-6 py-3">Authors</th>
                <th class="px-6 py-3">Actions</th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr class="hover:bg-gray-100">
                    <td class="border px-6 py-3">@book.Id</td> 
                    <td class="border px-6 py-3">@book.Title</td>
                    <td class="border px-6 py-3">@book.Description</td> 
                    <td class="border px-6 py-3">
                        <ul>
                            @foreach (var author in book.Authors)
                            {
                                <li>@author.Name
                                </li>
                            }
                        </ul>
                    </td>
                    <td class="border px-6 py-3">
                        <button @onclick = "(() => EditBook(book))" class="bg-blue-500 text-white hover:bg-blue-700 px-2 py-1 mr-2">
                            Edit
                        </button>
                        <button @onclick = "( () => deleteBook(book.Id))" class="bg-red-500 text-white hover:bg-red-700 px-2 py-1">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<AddBook EditingBook="EditingBook" OnBookAdded="AddNewBook" OnBookEdited="UpdateBook" />

@code {
    private List<BookDto> books = new List<BookDto>()
    {
        new BookDto { Id = Guid.NewGuid(), Title = "Book 1", Description = "Description 1", Authors = new List<AuthorDto>(){new AuthorDto {Id = Guid.NewGuid(), Name= "Author 1" }, { new AuthorDto { Id = Guid.NewGuid(), Name = "Author 1" } } } },
        new BookDto { Id = Guid.NewGuid(), Title = "Book 2", Description = "Description 2", Authors = new List<AuthorDto>(){new AuthorDto {Id = Guid.NewGuid(), Name= "Author 2" }} },
        new BookDto { Id = Guid.NewGuid(), Title = "Book 3", Description = "Description 3", Authors = new List<AuthorDto>(){new AuthorDto {Id = Guid.NewGuid(), Name= "Author 3" } } },
        new BookDto { Id = Guid.NewGuid(), Title = "Book 4", Description = "Description 4", Authors = new List<AuthorDto>(){new AuthorDto {Id = Guid.NewGuid(), Name= "Author 4" } } },

    };
    public BookDto EditingBook = null;

    private void deleteBook(Guid id)
    {
        this.books.RemoveAll(b => b.Id == id);
    }

    private void addBook(BookDto book)
    {
        this.books.Add(book);
    }

    private async Task AddNewBook(BookDto book)
    {
        this.books.Add(book);
    }

    private async Task EditBook(BookDto book)
    {
        EditingBook= book;
    }
    private async Task UpdateBook(BookDto book)
    {
        var index = this.books.FindIndex(b => b.Id == book.Id);
        this.books[index] = book;
        EditingBook= null;
    }


}
